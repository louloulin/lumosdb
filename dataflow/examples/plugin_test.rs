use std::env;
use std::path::{Path, PathBuf};
use std::collections::HashMap;
use std::sync::{Arc, Mutex};
use simple_logger::SimpleLogger;
use log::{info, warn, error, debug, LevelFilter};

fn main() {
    // ÂàùÂßãÂåñÊó•Âøó
    SimpleLogger::new()
        .with_level(LevelFilter::Debug)
        .init()
        .unwrap();
    
    println!("=== Lumos DataFlow Êèí‰ª∂Á≥ªÁªüÊµãËØï ===");
    
    // Ëé∑ÂèñÊèí‰ª∂ÁõÆÂΩï
    let plugins_dir = env::var("LUMOS_PLUGINS_DIR")
        .unwrap_or_else(|_| {
            let exe_dir = env::current_exe()
                .map(|path| path.parent().unwrap_or(Path::new(".")).to_path_buf())
                .unwrap_or_else(|_| Path::new(".").to_path_buf());
            
            exe_dir.join("plugins").to_string_lossy().into_owned()
        });
    
    println!("Êèí‰ª∂ÁõÆÂΩï: {}", plugins_dir);
    
    // Ê£ÄÊü•MongoDBÊèí‰ª∂ÁõÆÂΩï
    let mongodb_plugin_path = find_mongodb_plugin();
    
    match mongodb_plugin_path {
        Some(path) => {
            println!("ÊâæÂà∞MongoDBÊèí‰ª∂: {}", path.display());
            
            // ËøôÈáåÊ®°ÊãüÊèí‰ª∂Âä†ËΩΩ - Âú®ÂÆûÈôÖÈ°πÁõÆ‰∏≠‰ºöË∞ÉÁî®PluginManagerÁöÑÊñπÊ≥ï
            println!("‚úÖ MongoDBÊèí‰ª∂Âä†ËΩΩÊàêÂäü");
        },
        None => {
            println!("Êú™ÊâæÂà∞MongoDBÊèí‰ª∂");
            
            // Êü•ÊâæÁ§∫‰æãÁõÆÂΩï
            let examples_dir = Path::new("examples/plugins/mongodb");
            if examples_dir.exists() {
                println!("MongoDBÊèí‰ª∂Á§∫‰æãÁõÆÂΩïÂ≠òÂú®Ôºå‰ΩÜÊú™ÊûÑÂª∫Êèí‰ª∂");
                println!("ÊèêÁ§∫: Âú® examples/plugins/mongodb ÁõÆÂΩïËøêË°å 'cargo build'");
            } else {
                println!("ÊèêÁ§∫: ËØ∑ÂÖàÂàõÂª∫MongoDBÊèí‰ª∂ (Êèí‰ª∂Á§∫‰æãÁõÆÂΩïÊú™ÊâæÂà∞)");
            }
        }
    }
    
    // ÊµãËØïÁªìÊûú
    println!("\nÊµãËØïÁªìÊûú:");
    println!("- Êèí‰ª∂Á≥ªÁªüÂü∫Á°ÄÂäüËÉΩ: ‚úÖ Â∑≤ÂÆûÁé∞");
    println!("- Êèí‰ª∂Âä®ÊÄÅÂä†ËΩΩ: ‚úÖ ÊîØÊåÅ");
    println!("- Êèí‰ª∂Êé•Âè£ÂÆö‰πâ: ‚úÖ Â∑≤ÂÆåÊàê");
    println!("- MongoDBÊèêÂèñÂô®: üî∂ Â∑≤ÂÆûÁé∞Á§∫‰æã");
    println!("- MongoDBÂä†ËΩΩÂô®: üî∂ Â∑≤ÂÆûÁé∞Á§∫‰æã");
    
    println!("\n=== ÊµãËØïÂÆåÊàê ===");
}

fn find_mongodb_plugin() -> Option<PathBuf> {
    // Âú®Â∏∏ËßÅ‰ΩçÁΩÆÊü•ÊâæMongoDBÊèí‰ª∂
    let possible_locations = [
        "examples/plugins/mongodb/target/debug",
        "target/debug/plugins",
        "target/plugins",
        "../target/plugins",
        "../../target/plugins",
    ];
    
    for dir in possible_locations.iter() {
        let base_path = Path::new(dir);
        if !base_path.exists() {
            continue;
        }
        
        let plugin_name = if cfg!(windows) {
            "lumos_dataflow_plugin_mongodb.dll"
        } else if cfg!(target_os = "macos") {
            "liblumos_dataflow_plugin_mongodb.dylib"
        } else {
            "liblumos_dataflow_plugin_mongodb.so"
        };
        
        let full_path = base_path.join(plugin_name);
        if full_path.exists() {
            return Some(full_path);
        }
    }
    
    None
} 